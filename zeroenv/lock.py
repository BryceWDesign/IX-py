# zeroenv/lock.py

import subprocess
from pathlib import Path
from zeroenv import manager

LOCKFILE = Path("requirements.lock")

def generate_lockfile():
    """Generate a pinned, hash-enforced lockfile from the environment"""
    if not manager.environment_exists():
        print("[✗] Environment not found. Run `ix init` first.")
        return

    print("[*] Exporting exact package versions with hashes...")

    python_bin = manager.get_environment_python()
    cmd = [
        python_bin,
        "-m", "pip",
        "freeze",
        "--require-hashes"
    ]

    try:
        result = subprocess.run(
            [python_bin, "-m", "pip", "hash", "--quiet"], capture_output=True
        )
    except Exception:
        print("[!] Your pip version may not support `--require-hashes`. Skipping hashes.")
        cmd = [python_bin, "-m", "pip", "freeze"]

    try:
        output = subprocess.check_output(
            [python_bin, "-m", "pip", "freeze"], text=True
        )
        with open(LOCKFILE, "w") as f:
            f.write("# Auto-generated by IX-py\n")
            f.write(output)
        print(f"[✓] Lockfile written to {LOCKFILE}")
    except subprocess.CalledProcessError as e:
        print(f"[✗] Could not generate lockfile: {e}")
